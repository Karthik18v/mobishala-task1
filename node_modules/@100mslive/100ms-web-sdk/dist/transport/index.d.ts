import ITransportObserver from './ITransportObserver';
import ITransport from './ITransport';
import HMSTrack from '../media/tracks/HMSTrack';
import HMSTrackSettings from '../media/settings/HMSTrackSettings';
import HMSVideoTrackSettings from '../media/settings/HMSVideoTrackSettings';
import HMSMessage from '../interfaces/message';
export default class HMSTransport implements ITransport {
    private state;
    private tracks;
    private readonly observer;
    private publishConnection;
    private subscribeConnection;
    /**
     * Map of callbacks used to wait for an event to fire.
     * Used here for:
     *  1. publish/unpublish waits for [IPublishConnectionObserver.onRenegotiationNeeded] to complete
     */
    private readonly callbacks;
    private signalObserver;
    private readonly signal;
    private publishConnectionObserver;
    private subscribeConnectionObserver;
    private handleIceConnectionFailure;
    constructor(observer: ITransportObserver);
    getLocalScreen(settings: HMSVideoTrackSettings): Promise<HMSTrack>;
    getLocalTracks(settings: HMSTrackSettings): Promise<Array<HMSTrack>>;
    join(authToken: string, peerId: string, customData: any, initEndpoint?: string, autoSubscribeVideo?: boolean): Promise<void>;
    leave(): Promise<void>;
    private publishTrack;
    private unpublishTrack;
    publish(tracks: Array<HMSTrack>): Promise<void>;
    unpublish(tracks: Array<HMSTrack>): Promise<void>;
    sendMessage(message: HMSMessage): void;
    trackUpdate(track: HMSTrack): void;
}
