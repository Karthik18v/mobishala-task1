import HMSTrack from '../media/tracks/HMSTrack';
import { HMSNotificationMethod } from './models/enums/HMSNotificationMethod';
import { HMSNotifications, TrackStateNotification } from './models/HMSNotifications';
import HMSPeer from '../interfaces/hms-peer';
import HMSUpdateListener, { HMSAudioListener } from '../interfaces/update-listener';
import { SpeakerList } from './models/HMSSpeaker';
export default class NotificationManager extends EventTarget {
    hmsPeerList: Map<string, HMSPeer>;
    localPeer: HMSPeer | null;
    private TAG;
    private tracksToProcess;
    private trackStateMap;
    private listener;
    private audioListener;
    handleNotification(method: HMSNotificationMethod, notification: HMSNotifications, listener: HMSUpdateListener, audioListener: HMSAudioListener | null): void;
    handleRoleChange(params: TrackStateNotification): void;
    handleTrackMetadataAdd(params: TrackStateNotification): void;
    private processPendingTracks;
    /**
     * Sets the tracks to peer and returns the peer
     */
    handleOnTrackAdd: (track: HMSTrack) => void;
    /**
     * Sets the track of corresponding peer to null and returns the peer
     */
    handleOnTrackRemove: (track: HMSTrack) => void;
    handleTrackUpdate: (params: TrackStateNotification) => void;
    cleanUp: () => void;
    findPeerByPeerId: (peerId: string) => HMSPeer | undefined;
    private handlePeerJoin;
    private handlePeerLeave;
    private handlePeerList;
    /**
     * @param speakerList List of speakers[peer_id, level] sorted by level in descending order.
     */
    handleActiveSpeakers(speakerList: SpeakerList): void;
    private getPeerTrackByTrackId;
}
