import HMSTrack from '../../media/tracks/HMSTrack';
import { Track } from '../../signal/ISignal';
import { HMSNotificationMethod } from './enums/HMSNotificationMethod';
import Message from './HMSMessage';
import { SpeakerList } from './HMSSpeaker';
export declare type HMSNotifications = Peer | PeerList | Message | TrackStateNotification | SpeakerList | undefined;
export interface TrackStateNotification {
    tracks: Map<string, TrackState>;
    peer: PeerNotificationInfo;
}
export interface PeerNotificationInfo {
    peer_id: string;
    info: Info;
}
export interface Info {
    name: string;
    data: string;
    userId: string;
}
export declare class TrackState implements Track {
    mute: boolean;
    type: 'audio' | 'video';
    source: 'regular' | 'screen' | 'plugin';
    description: string;
    track_id: string;
    stream_id: string;
    constructor(track: HMSTrack | Track);
}
export declare class Peer {
    peerId: string;
    info: Info;
    role: string;
    tracks: TrackState[];
    constructor(params: any);
}
export declare class PeerList {
    peers: Peer[];
    constructor(params: any);
}
export declare const getNotification: (method: HMSNotificationMethod, params: any) => any;
